pipeline {
  agent any

    tools { 
    go 'Go-1.22'     // <-- the name you configured in Jenkins
 }


  environment {
    SERVICE_PATH = 'src/product-catalog'
    COVERAGE_MIN = '20'
  }

  stages {
    stage('Code Checkout') {
      steps {
        cleanWs()
        checkout scm
        sh '''
          echo "Commit SHA: $(git rev-parse HEAD)"
          echo "Branch:     $(git rev-parse --abbrev-ref HEAD)"
          echo "Build #:    ${BUILD_NUMBER}"
          echo "Workspace: ${WORKSPACE}"
        '''
      }
    }

    stage('Unit Tests') {
      steps {
        dir("${SERVICE_PATH}") {
          sh '''#!/usr/bin/env bash
            set -e
            go version

            echo "[go] downloading modules..."
            go mod download

            echo "[test] running unit tests with race & coverage..."
            go test ./... 

            echo "[coverage] summarizing..."
            go tool cover -func=coverage.out | tee coverage.txt

            TOTAL=$(awk '/^total:/ {print substr($3,1,length($3)-1)}' coverage.txt)
            TOTAL_INT=${TOTAL%.*}
            echo "Total coverage: ${TOTAL}%"

            if [ "$TOTAL_INT" -lt "${COVERAGE_MIN}" ]; then
              echo "Coverage ${TOTAL}% is below required ${COVERAGE_MIN}%"
              exit 1
            fi

            echo "Coverage gate passed"
          '''
        }
      }
      post {
        always {
          dir("${SERVICE_PATH}") {
            archiveArtifacts artifacts: 'coverage.out, coverage.txt', allowEmptyArchive: true
          }
        }
      }
    }

    stage('Secrets Scan') {
    steps {
        sh '''#!/usr/bin/env bash
          set -e
          gitleaks detect --no-banner --exit-code 1
        '''
      }
    }

    stage('Test Test') {
      steps {
        echo 'test test'
      }
    }
  }

  post {
    always {
      cleanWs()
    }
  }
}
