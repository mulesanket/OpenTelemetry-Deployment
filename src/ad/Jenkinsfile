pipeline {
  agent any
  options { timestamps(); buildDiscarder(logRotator(numToKeepStr: '3')) }

  stages {
    stage('Source Code Checkout') {
      steps {
        cleanWs()
        checkout scm
        sh '''
          echo "Commit SHA: $(git rev-parse HEAD)"
          echo "Branch    : $(git rev-parse --abbrev-ref HEAD)"
          echo "Build #   : ${BUILD_NUMBER}"
        '''
      }
    }

    stage('Dependency Restore') {
      steps {
        dir('src/ad') {
          sh 'chmod +x gradlew'
          sh './gradlew --version --no-daemon'
          sh './gradlew downloadRepos --no-daemon'
        }
      }
    }

    stage('Build & Unit Tests') {
      steps {
        dir('src/ad') {
          sh './gradlew clean build -x verifyGoogleJavaFormat --no-daemon --stacktrace'
        }
      }
      post {
        always {
          junit allowEmptyResults: true, testResults: 'src/ad/build/test-results/test/*.xml'
          archiveArtifacts allowEmptyArchive: true, artifacts: 'src/ad/build/libs/*.jar', fingerprint: true
        }
      }
    }

    stage('SonarQube Analysis') {
      steps {
        dir('src/ad') {
          // Uses the SonarQube server named 'sonar' from Manage Jenkins > System
          withSonarQubeEnv('sonar') {
            sh './gradlew sonar --no-daemon'
          }
        }
      }
    }

    stage('Quality Gate') {
      steps {
        timeout(time: 5, unit: 'MINUTES') {
          waitForQualityGate abortPipeline: true
        }
      }
    }

    stage('test test') {
      steps { echo 'test test test' }
    }
  }
}
